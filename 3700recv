#!/usr/bin/env python3

import sys
import socket
import datetime
import json
import signal

MSG_SIZE = 1500
TIMEOUT = 30
cached = []  # packets sorted by sequence number
seenSeqns = set()
ackedSeqns = [] # list of (seqn, len)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()


def insertInOrder(new_packet):
    if new_packet not in cached:
        for i, packet in enumerate(cached):
            if packet['sequence'] > new_packet['sequence']:
                cached.insert(i, new_packet)
                return
        cached.append(new_packet)


def cachedIsInOrder(seqn):
    if len(cached) > 0:
        length = 0
        for packet in cached:
            if packet['sequence'] != seqn + length:
                return False
            else:
                seqn = packet['sequence']
                length = len(packet['data'])
        return True


def ackCachedPackets(sock, addr, seqn):
    assert(len(cached) > 0)
    for packet in cached:
        seqn = packet['sequence'] + len(packet['data'])
        ack(sock, addr, packet)
    return seqn


def processAndClearCache():
    for packet in cached:
        sys.stdout.write(packet['data'])
    cached.clear()


def ack(sock, addr, decoded):
    seqnTuple = (decoded['sequence'], len(decoded['data']))
    if seqnTuple not in ackedSeqns:
        ackedSeqns.append(seqnTuple)
    msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
    log("ABOUT TO SEND " + msg)
    if sock.sendto(msg.encode('ascii'), addr) < len(msg):
        log("[error] unable to fully send packet")


def main():
    # Bind to localhost and an ephemeral port
    udp_ip = "127.0.0.1"
    udp_port = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((udp_ip, udp_port))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    udp_port = sock.getsockname()[1]
    log(f"[bound] {udp_port}")

    # initialize sequence # to 0 to start out
    seqn = 0
    lastGoodPacket = None
    # Now listen for packets
    while True:
        result = sock.recvfrom(MSG_SIZE)

        # If nothing is ready, we hit the timeout
        if result:
            (data, addr) = result
            data = data.decode('ascii')
            decoded = json.loads(data)

            # If the EOF flag is set, exit
            if decoded['eof']:
                ack(sock, addr, decoded)
                log("[completed]")
                sys.exit(0)
            if decoded['sequence'] in seenSeqns:
                if len(ackedSeqns) > 0:
                    lastAcked = ackedSeqns[len(ackedSeqns) - 1]
                    if decoded['sequence'] <= lastAcked[0] + lastAcked[1]:
                        ack(sock, addr, decoded)
                        continue
            # If there is data, we accept it and print it out
            if decoded['data']:
                seenSeqns.add(decoded['sequence'])
                if decoded['sequence'] == seqn:
                    # The data is in order
                    if decoded in cached:
                        cached.remove(decoded)
                    seqn += len(decoded["data"])
                    log(
                        f"[recv data] {decoded['sequence']} ({len(decoded['data'])}) ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])
                    lastGoodPacket = decoded
                    ack(sock, addr, decoded)
                    if (cachedIsInOrder(seqn)):
                        seqn = ackCachedPackets(sock, addr, seqn)
                        processAndClearCache()
                else:
                    # case where the previous ack was dropped
                    if lastGoodPacket != None and lastGoodPacket['sequence'] == decoded['sequence']:
                        ack(sock, addr, decoded)
                    # case where some message was dropped
                    else:
                        # the data is not in order
                        if decoded['sequence'] > seqn:
                            insertInOrder(decoded)
                        if (cachedIsInOrder(seqn)):
                            seqn = ackCachedPackets(sock, addr, seqn)
                            processAndClearCache()
        else:
            log("[error] timeout")
            sys.exit(-1)


if __name__ == '__main__':
    main()
