#!/usr/bin/env python3

import sys
import socket
import select
import datetime
import json
import time

MSG_SIZE = 1500
DATA_SIZE = 1472
TIMEOUT = 30
WINDOW_SIZE = 40
messageQueue = []

# Logger helper
def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()

# Queues the next packet from stdin
def enqueue_packet(seqn):
    msg = {"sequence": seqn, "data": "", "ack": False, "eof": False}
    overhead = len(json.dumps(msg))
    msg["data"] = sys.stdin.read(DATA_SIZE - overhead)
    if len(msg["data"]) > 0:
        messageQueue.append(msg)
    return seqn + len(msg['data'])

# Sends the given packet to the socket
def send_packet(seqn, sock, dest, msg):
    if len(msg["data"]) > 0:
        assert (len(
            msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"
        if sock.sendto(json.dumps(msg).encode('ascii'), dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(seqn) +
                " (" + str(len(msg["data"])) + ")")
        return seqn + len(msg["data"])
    return seqn

# Tells the receiver that we're done. Send the message 10 times, cross fingers
def teardown(seqn, sock, dest):
    msg = json.dumps(
        {"eof": True, "data": "", "sequence": seqn, "ack": False}).encode('ascii')
    tries = 0
    while (tries < 10):
        tries += 1
        sock.sendto(msg, dest)
        time.sleep(0.05)

# gets receiver sock, dest, and starting seqn
def setup():
    # Bind to localhost and an ephemeral port
    ip_port = sys.argv[1]
    udp_ip = ip_port[0:ip_port.find(":")]
    udp_port = int(ip_port[ip_port.find(":")+1:])
    dest = (udp_ip, udp_port)
    seqn = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(TIMEOUT)

    return (seqn, sock, dest)

# Listens for an ack from the receiver
def get_ack(sock, dest, timeout):
    result = None
    ready = select.select([sock], [], [], timeout)
    if ready[0]:
        result = sock.recvfrom(MSG_SIZE)
        (data, _addr) = result
        ack = json.loads(data.decode('ascii'))
        log("[recv ack] " + str(ack['ack']))
        return ack
    else:
        return None

# Removes packets less than or equal to this seqn
def removeBySeqn(seqn):
    global messageQueue
    newMessages = []
    for packet in messageQueue:
        if packet['sequence'] + len(packet['data']) > seqn:
            newMessages.append(packet)
    messageQueue = newMessages
    return seqn  # means we have reached reading UP TO seqn bytes


def main():
    info = setup()
    if info == None:
        exit(0)
    seqn = info[0]
    sock = info[1]
    dest = info[2]

    eof = False
    # Now read in data, send packets
    while not eof:
        log("ABOUT TO SLEEP")
        seqn_copy = seqn
        # enqueue WINDOW_SIZE messages, send them all
        for i in range(len(messageQueue), WINDOW_SIZE):
            new_seq = enqueue_packet(seqn)
            if new_seq == seqn:
                eof = True
                break
            seqn = new_seq
        # listen for acknowledgements for some time. remove acknowledged sequence numbers
        for message in messageQueue:
            seqn_copy = send_packet(seqn_copy, sock, dest, message)
        ack = get_ack(sock, dest, 0.3)
        # if acknowledged, remove from list so we won't re-send
        while ack != None:
            removeBySeqn(ack['ack'])
            ack = get_ack(sock, dest, 0.1)
    # if EOF, continue sending the messges leftover in queue until all ack'ed
    while len(messageQueue) > 0:
        seqn_copy = seqn
        for message in messageQueue:
            seqn_copy = send_packet(seqn_copy, sock, dest, message)
        ack = get_ack(sock, dest, 0.5)
        while ack != None:
            seqn = removeBySeqn(ack['ack'])
            ack = get_ack(sock, dest, 0.1)
    teardown(seqn, sock, dest)


if __name__ == '__main__':
    main()
